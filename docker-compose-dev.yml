version: "3"

services:
  postgresql:
    container_name: postgresql
    image: postgres:15.3-alpine3.18
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - 5432:5432
    env_file:
      - .env
    volumes:
      - postgresql_volume:/var/lib/postgresql/data

  backend:
    build:
      context: ./src/backend
      target: builder
    container_name: backend
    image: backend
    depends_on:
      postgresql:
        condition: service_healthy
    restart: always
    ports:
      - 3001:3001
      - 3002:3002
      - 5555:5555
    env_file:
      - .env
    command: npm run start:migrate:dev
    # for dev
    volumes:
      - nestjs_volume:/app

  frontend:
    build:
      context: ./src/frontend
      target: builder
    container_name: frontend
    image: frontend
    depends_on:
      - backend
    restart: always
    env_file:
      - .env
    ports:
      - 80:80
    command: sh /app/dev.sh
    # for dev
    volumes:
      - nextjs_volume:/app/pages
      # - C:\Users\hwoar\OneDrive\바탕 화면\sw_train\Web_development\backendgg\backend-namkim\backend-namkim\src\frontend:/app
    # command: [nginx-debug, '-g', 'daemon off;']

networks:
  mini-ts:
    driver: bridge

volumes:
  postgresql_volume:
    external: false
  # for dev
  nestjs_volume:
    driver_opts:
      type: none
      device: /Users/ysungwon/ft_tran/backend/src/backend
      o: bind
  nextjs_volume:
    driver_opts:
      type: none
      device: /Users/ysungwon/ft_tran/backend/src/frontend/pages
      o: bind
#     name: postgresql_volume
#     driver_opts:
#       type: none
#       device: /Users/seunchoi/app-docker/pgdata
#       o: bind
